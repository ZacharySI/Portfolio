@page "/sudoku"

<PageTitle>Sudoku</PageTitle>

<h1>Sudoku Game</h1>

Example Project
<br />
<div style="text-align:center;">
    @for (int i = 0; i < 9; i++)
    {
        for (int j = 0; j < 9; j++)
        {
            var _value = board[i, j];
            int row = i; int col = j;
            <button style="@GetStyle(i,j)" @onclick="() => AssignWorkingCoords(row, col)">@_value</button>
        }
        <br />
    }
    <br />
<div>
    @foreach (var num in Enumerable.Range(1, 9))
    {
        @if (@AnyLeftInBoard(num))
        {

            <button style="margin-left:15px;" @onclick="() => AssignToSquare(num)"><h1 style="color:black; display: inline;margin-right:5px;"> @num </h1></button>
        }
        else
        {
            <button style="margin-left:15px;" disabled><h1 style="color: gainsboro; display: inline; margin-right: 5px;"> @num </h1></button>
        }
    }
</div>
    <br />
    <button style="outline: 2px solid; background-color: lightgray; margin: 5px; padding: 3px; " @onclick="CheckBoard">Submit</button>
    <button style="outline: 2px solid; background-color: lightgray; margin: 5px; padding: 3px; " @onclick="GenerateValidBoard">Generate New</button>
    <button style="outline: 2px solid; background-color: lightgray; margin: 5px; padding: 3px; " @onclick="Refresh">Refresh</button>
    <div>
        <input style="margin-top:20px;" type="radio" checked="@(difficulty == 0)" name="difficulty" @onchange="@(() => difficulty = 0)" />
        <label @onclick="@(() => difficulty = 0)">easy</label><br>
        <input style="margin-top:20px;" type="radio" checked="@(difficulty == 1)" name="difficulty" @onchange="@(() => difficulty = 1)" />
        <label @onclick="@(() => difficulty = 1)">medium</label><br>
        <input style="margin-top:20px;" type="radio" checked="@(difficulty == 2)" name="difficulty" @onchange="@(() => difficulty = 2)" />
        <label @onclick="@(() => difficulty = 2)">hard</label><br>
    </div>
    <br />
    <p>@IsValid</p>
</div>

@code{
    private int ValuesRemoved { get; set; }
    private int[,] board;
    private string IsValid = string.Empty;
    private readonly int N = 9;
    private readonly int SRN = (int)Math.Sqrt(9);
    private int difficulty = 1;
    private int? WorkingRow;
    private int? WorkingColumn;

    private int[,] CopyForRefresh = new int[9, 9];

    protected override void OnInitialized()
    {
        GenerateValidBoard();

    }

    private void RefreshCommonValues()
    {
        IsValid = String.Empty;
        WorkingRow = null;
        WorkingColumn = null;
    }

    private void GenerateValidBoard()
    {
        ValuesRemoved = difficulty == 0 ? 12 : difficulty == 1 ? 24 : 48;
        board = new int[9, 9];

        FillDiagonal();

        FillRemaining(0, SRN);

        RemoveDigits();

        CopyForRefresh = (int[,])board.Clone();

        RefreshCommonValues();
    }

    private void FillDiagonal()
    {
        for (int i = 0; i < N; i = i + SRN)
            FillBox(i, i);
    }

    private bool UnUsedInBox(int rowStart, int colStart, int num)
    {
        for (int i = 0; i < SRN; i++)
            for (int j = 0; j < SRN; j++)
                if (board[rowStart + i, colStart + j] == num)
                    return false;
        return true;
    }

    private void FillBox(int row, int col)
    {
        int num;
        for (int i = 0; i < SRN; i++)
        {
            for (int j = 0; j < SRN; j++)
            {
                do
                {
                    num = GenerateRandom(N);
                }
                while (!UnUsedInBox(row, col, num));
                board[row + i, col + j] = num;
            }
        }
    }

    private int GenerateRandom(int num)
    {
        Random rand = new Random();
        return (int)Math.Floor((double)(rand.NextDouble() * num + 1));
    }

    private bool CheckIfSafe(int i, int j, int num)
    {
        return (UnUsedInRow(i, num) &&
                UnUsedInCol(j, num) &&
                UnUsedInBox(i - i % SRN, j - j % SRN, num));
    }

    private bool UnUsedInRow(int i, int num)
    {
        for (int j = 0; j < N; j++)
            if (board[i, j] == num)
                return false;
        return true;
    }

    private bool UnUsedInCol(int j, int num)
    {
        for (int i = 0; i < N; i++)
            if (board[i, j] == num)
                return false;
        return true;
    }

    private bool FillRemaining(int i, int j)
    {
        if (j >= N && i < N - 1)
        {
            i = i + 1;
            j = 0;
        }
        if (i >= N && j >= N)
            return true;

        if (i < SRN)
        {
            if (j < SRN)
                j = SRN;
        }
        else if (i < N - SRN)
        {
            if (j == (int)(i / SRN) * SRN)
                j = j + SRN;
        }
        else
        {
            if (j == N - SRN)
            {
                i = i + 1;
                j = 0;
                if (i >= N)
                    return true;
            }
        }

        for (int num = 1; num <= N; num++)
        {
            if (CheckIfSafe(i, j, num))
            {
                board[i, j] = num;
                if (FillRemaining(i, j + 1))
                    return true;

                board[i, j] = 0;
            }
        }
        return false;
    }

    private void RemoveDigits()
    {
        int count = ValuesRemoved;
        while (count != 0)
        {
            int cellId = GenerateRandom(N * N) - 1;

            int i = (cellId / N);
            int j = cellId % N;
            if (j != 0)
                j = j - 1;

            if (board[i, j] != 0)
            {
                count--;
                board[i, j] = 0;
            }
        }
    }

    private void CheckBoard()
    {
        for (int i = 0; i < 9; i++)
            for (int j = 0; j < 9; j++)
            {
                if (board[i, j] < 1 || board[i, j] > 9)
                {
                    IsValid = "Only values between 1-9 accepted";
                    return;
                }
            }
        // Check the rows and columns
        HashSet<int> RowSet;
        HashSet<int> ColSet;
        for (int i = 0; i < 9; i++)
        {
            RowSet = new();
            ColSet = new();
            for (int j = 0; j < 9; j++)
            {
                if (!(RowSet.Add(board[i, j]) && ColSet.Add(board[j, i])))
                {
                    IsValid = $"Duplicate in row or column {i} and {j} : {board[i, j]} and {board[j, i]}";
                    return;
                }
            }
        }
        // check the squares
        HashSet<int> SquareSet;
        for (int i = 1; i < 9; i += 3) // 1, 4, 7
        {
            for (int j = 1; j < 9; j += 3) // 1, 4, 7
            {
                SquareSet = new();
                foreach (var sub in Enumerable.Range(-1, 1))
                {
                    if (!(SquareSet.Add(board[i + sub, j - 1]) && SquareSet.Add(board[i + sub, j]) && SquareSet.Add(board[i + sub, j + 1])))
                    {
                        IsValid = "Duplicate in Square";
                        return;
                    }
                }
            }
        }
        IsValid = "Board Is Correct";
        return;
    }

    private string GetStyle(int row, int column)
    {
        string border = "3px solid black;";
        string ReturnString = "outline:solid black;width:40px;height:40px;text-align:right;";
        if (row == WorkingRow && column == WorkingColumn)
            ReturnString += "background-color: yellow;";
        if (board[row, column] == 0)
            ReturnString += "color: red;"; // starts showing the limitation of this
        if (row == 0 || row == 3 || row == 6)
            ReturnString += $"border-top: {border}";
        if (column == 0 || column == 3 || column == 6)
            ReturnString += $"border-left: {border}";
        if (column == 2 || column == 5 || column == 8)
            ReturnString += $"border-right: {border}";
        if (row == 2 || row == 5 || row == 8)
            ReturnString += $"border-bottom: {border}";

        return ReturnString;
    }

    private bool AnyLeftInBoard(int number)
    {
        int count = 0;
        foreach (int i in board)
            if (i == number)
                count++;
        return count != 9;
    }

    private void Refresh()
    {
        board = (int[,])CopyForRefresh.Clone();
        RefreshCommonValues();
    }

    private void AssignWorkingCoords(int row, int column)
    {
        WorkingRow = row;
        WorkingColumn = column;
    }

    private void AssignToSquare(int value)
    {
        if (WorkingColumn != null && WorkingRow != null)
            board[(int)WorkingRow, (int)WorkingColumn] = value;
    }
}
